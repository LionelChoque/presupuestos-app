import { pgTable, text, serial, integer, boolean, jsonb, timestamp, decimal } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  email: text("email"),
  nombre: text("nombre"),
  apellido: text("apellido"),
  rol: text("rol").default("usuario").notNull(),
  fechaCreacion: timestamp("fecha_creacion").defaultNow(),
  ultimoAcceso: timestamp("ultimo_acceso"),
  activo: boolean("activo").default(true),
});

// Resto del archivo sigue igual...

// Modificar las definiciones de esquema de inserci√≥n
export const insertUserSchema = createInsertSchema(users);
export const userInsertSchema = insertUserSchema.omit({
  id: true,
  fechaCreacion: true,
  ultimoAcceso: true
});

export const insertUserActivitySchema = createInsertSchema(userActivities);
export const userActivityInsertSchema = insertUserActivitySchema.omit({
  id: true,
  timestamp: true,
});

export const insertBudgetItemSchema = createInsertSchema(budgetItems);
export const budgetItemInsertSchema = insertBudgetItemSchema.omit({
  id: true,
});

export const insertBudgetSchema = createInsertSchema(budgets);
export const budgetInsertSchema = insertBudgetSchema.omit({
  id: true,
});

export const insertContactInfoSchema = createInsertSchema(contactInfo);
export const contactInfoInsertSchema = insertContactInfoSchema.omit({
  id: true,
});

export const insertImportLogSchema = createInsertSchema(importLogs);
export const importLogInsertSchema = insertImportLogSchema.omit({
  id: true,
  timestamp: true,
});

// Types
export type InsertUser = z.infer<typeof userInsertSchema>;
export type User = typeof users.$inferSelect;

export type InsertBudgetItem = z.infer<typeof budgetItemInsertSchema>;
export type BudgetItem = typeof budgetItems.$inferSelect;

export type InsertBudget = z.infer<typeof budgetInsertSchema>;
export type Budget = typeof budgets.$inferSelect;

export type InsertContactInfo = z.infer<typeof contactInfoInsertSchema>;
export type ContactInfo = typeof contactInfo.$inferSelect;

export type InsertImportLog = z.infer<typeof importLogInsertSchema>;
export type ImportLog = typeof importLogs.$inferSelect;

export type InsertUserActivity = z.infer<typeof userActivityInsertSchema>;
export type UserActivity = typeof userActivities.$inferSelect;
